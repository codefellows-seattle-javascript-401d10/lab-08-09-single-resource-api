'use strict';

const storage = {};
// STORES THINGS ON OBJECT
//inside storage looks like this: if they aren't found, it gives an error
//{
//  {
//    note: 123412342,
//    name: 'goose',
//    content: 'asdfasdf'
//  }
//}

//storage.note.id = note id
//storage.list.id = list id
//enables us to store things of different types by their id
// if it doesnt exist, create the object for them

//Assumes ids are generated by node-uuid
module.exports = exports = {};
//schema represents the name - (string)
exports.createItem = function(schemaName, item) {
  //we are storing an item on an object
  //when somebody creates a recipe, they have a place to put it
  if (!schemaName) return Promise.reject (new Error('expected schemaName'));
  if (!item) return Promise.reject (new Error('expected item'));

  if(!storage[schemaName]) storage[schemaName] = {};
  // [] used to index object by pass an item inside
  storage[schemaName][item.id ]= item;
  return Promise.resolve(item);
};

//if there is no schemaname or id, we reject
exports.fetchItem = function(schemaName, id) {
  return new Promise((resolve,reject) => {
    if (!schemaName) return reject (new Error('expected schemaname'));
    if (!id) return reject (new Error('expected id'));

    var schema = storage[schemaName];
    if(!schema) return reject(new Error('schema not found'));
    //if schema not found, return an error
    var item = schemaName[id];
    if(!item) return reject(new Error('item not found'));
    //if id not found, return error
    resolve(item);
  });
};

//deletes an item
exports.deleteItem = function(schemaName, id) {
  return new Promise((resolve,reject) => {
    if (!schemaName) return reject (new Error('expected schemaname'));
    if (!id) return reject (new Error('expected id'));

    var schema = storage[schemaName];
    if(!schema) return reject(new Error('schema not found'));
    //if schema not found, return an error
    delete schema[id];
    resolve();
  });
};
